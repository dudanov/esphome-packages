# Default names
substitutions:
  name: swipe-controller
  friendly_name: Swipe Controller

esphome:
  project:
    name: "dudanov.swipe-led-controller"
    version: "1.0"

packages:
  esp32: !include ../esp32/esp32.yaml
  default: !include ../../common/default.yaml

# External components
external_components:
  - source: github://dudanov/esphome-components
    components: [esp32_dac_generator, ir_proximity]
    refresh: 0d

# Remote receiver for proximity sensor
remote_receiver:
  pin:
    number: 4
    inverted: on

# Proximity sensor
binary_sensor:
  - platform: ir_proximity
    id: hands_detector
    name: Hands Detector
    icon: mdi:hand-clap
    device_class: motion
    led_pin: 25
    min_power: 10%
    max_power: 70%
    filters:
      - delayed_off: 1s
    on_press:
      - if:
          condition:
            light.is_on: led_main
          then:
            - script.execute: turn_off
          else:
            - script.stop: turn_off
            - script.execute: turn_on
  - platform: template
    name: Delay
    icon: mdi:timer
    device_class: running
    id: delay_sensor
    lambda: "return id(timer).is_running();"

script:
  # Delay off timer
  - id: timer
    mode: restart
    then:
      - delay: !lambda "return id(off_delay).state * 1000;"
  # Turn on script
  - id: turn_on
    then:
      - if:
          condition:
            lambda: 'return id(settings_effect).state == "Normal";'
          then:
            - light.turn_on:
                id: led_main
                brightness: 100%
          else:
            - light.turn_on:
                id: led_main
                brightness: 100%
                effect: Fluorescent
            - delay: 2s
            - light.control:
                id: led_main
                effect: None
  # Turn off script
  - id: turn_off
    mode: restart
    then:
      - if:
          condition:
            script.is_running: turn_on
          then:
            - script.stop: turn_on
          else:
            - script.execute: timer
            - script.wait: timer
      - if:
          condition:
            lambda: 'return id(settings_effect).state == "Normal";'
          then:
            - light.turn_off:
                id: led_main
          else:
            - light.turn_off:
                id: led_main
                transition_length: 0s

# Light LED PWM output
output:
  - platform: ledc
    id: out_led
    pin: 18

light:
  - platform: monochromatic
    name: Light
    icon: mdi:wall-sconce-flat
    id: led_main
    output: out_led
    effects:
      - pulse:
      - random:
      - flicker:
      - strobe:
      - flicker:
          name: Fluorescent
          alpha: 55%
          intensity: 100%

# Onboard status led
status_led:
  pin: 14

number:
  - platform: template
    name: Sensitivity
    icon: mdi:signal-distance-variant
    entity_category: config
    mode: slider
    optimistic: true
    restore_value: true
    min_value: 1
    max_value: 10
    step: 0.5
    on_value:
      - output.set_level:
          id: hands_detector
          level: !lambda "return remap(x, 1.0f, 10.0f, id(hands_detector).get_min_power(), id(hands_detector).get_max_power());"
  - platform: template
    name: Off Delay
    id: off_delay
    icon: mdi:timer-sand
    entity_category: config
    mode: slider
    unit_of_measurement: sec
    optimistic: true
    restore_value: true
    min_value: 0
    max_value: 30
    step: 1

select:
  - platform: template
    name: Effect
    id: settings_effect
    icon: mdi:tune
    entity_category: config
    optimistic: true
    restore_value: true
    options:
      - Normal
      - Fluorescent
