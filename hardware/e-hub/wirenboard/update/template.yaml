# Config template for firmware update
http_request:
  verify_ssl: false

script:
  - id: ${id}_fetch_${sw_id}_version
    then:
      - http_request.get:
          url: https://fw-releases.wirenboard.com/${sw_id}/by-signature/${signature_id}/main/latest.txt
          capture_response: true
          on_response:
            lambda: |-
              body.pop_back();
              id(${id}_${sw_id}_version_available).publish_state(body);

text_sensor:
  - platform: modbus_controller
    id: ${id}_${sw_id}_version
    device_id: ${id}_device
    modbus_controller_id: ${id}_controller
    address: ${address}
    register_type: ${register_type}
    response_size: ${response_size}
    raw_encode: ANSI
    skip_updates: 99
    name: ${name} Version
    icon: mdi:identifier
    entity_category: diagnostic
    on_value:
      lambda: |-
        const auto &y = id(${id}_${sw_id}_version_available).state;
        if (x.empty() || y.empty()) return;
        id(${id}_${sw_id}_update_available).publish_state(x != y);

  - platform: template
    id: ${id}_${sw_id}_version_available
    device_id: ${id}_device
    name: ${name} Version Available
    icon: mdi:identifier
    entity_category: diagnostic
    update_interval: never
    on_value:
      lambda: |-
        const auto &y = id(${id}_${sw_id}_version).state;
        if (x.empty() || y.empty()) return;
        id(${id}_${sw_id}_update_available).publish_state(x != y);

binary_sensor:
  - platform: template
    id: ${id}_${sw_id}_update_available
    device_id: ${id}_device
    name: ${name} Update
    device_class: update
    entity_category: diagnostic
